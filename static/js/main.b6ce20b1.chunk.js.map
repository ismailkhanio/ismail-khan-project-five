{"version":3,"sources":["logo.svg","components/Header.js","firebase.js","components/Title.js","components/Product.js","context.js","components/CategoryNav.js","components/ProductInventory.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","alt","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Title","title","Product","setProducts","tempProducts","state","dbRef","on","snapshot","data","val","key","push","setState","products","handleAccessories","accessories","handleBest","best","handleBooks","books","handleExclusives","hak5","handleFeatured","featured","handleGadgets","gadgets","handleHotplug","hotplug","handleInternet","internet","cart","database","ref","dbCart","this","onClick","map","product","index","img","description","price","ProductContext","React","createContext","ProductInventory","Consumer","Footer","App","basename","process","Header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b6ce20b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ceeb9132.svg\";","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\n\r\n// THIS SHOULD BE THE HEADER\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <header>\r\n          <div className=\"wrapper headerContainer\">\r\n            <div className=\"logoContainer\">\r\n                <img\r\n                  src={logo}\r\n                  alt=\"Mr. Robot Computer Store Logo\"\r\n                  className=\"logoImg\"\r\n                />\r\n                <h1 className=\"logoHeading\">\r\n                  Mr. Robot <br></br>Computer Supply\r\n                </h1>\r\n              <p className=\"tagline\">Leaders in happy hacking.</p>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","// firebase.js\r\nimport firebase from 'firebase';\r\n// import 'firebase/database';\r\n\r\n// initialize firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCOosVNEbeMxbQz0KSzr7jAIdaiX4ldWiw\",\r\n  authDomain: \"mr-robot-computer-supply.firebaseapp.com\",\r\n  databaseURL: \"https://mr-robot-computer-supply.firebaseio.com\",\r\n  projectId: \"mr-robot-computer-supply\",\r\n  storageBucket: \"mr-robot-computer-supply.appspot.com\",\r\n  messagingSenderId: \"253179351098\",\r\n  appId: \"1:253179351098:web:3a15841ffae890c547a503\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\n// export the above configuration to firebase\r\nexport default firebase;\r\n","import React from 'react';\r\n\r\nfunction Title({title}) {\r\n  return (\r\n    // <div className=\"itemGridMenu\">\r\n    // </div>\r\n      <h2 className=\"itemTitleHeading\">{title}</h2>\r\n  );\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\nimport Title from \"./Title\";\r\n\r\nclass Product extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      products: [],\r\n      cart: [],\r\n      dbRef: firebase.database().ref(),\r\n      dbCart: firebase.database().ref('cart'),\r\n    }; \r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    // all products from firebase\r\n    this.setProducts();\r\n    // cart from firebase\r\n  }\r\n\r\n  setProducts = () => {\r\n    // Here we create a variable that holds a reference to our database\r\n\r\n    let tempProducts = [];\r\n\r\n    this.state.dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n      for (let key in data) {\r\n        tempProducts.push(data[key]);\r\n      }\r\n    });\r\n    this.setState({\r\n      products: tempProducts,\r\n    });\r\n  };\r\n\r\n  // handle product category states\r\n  handleAccessories = () => {\r\n    let tempProducts = [];\r\n\r\n    this.state.dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n\r\n      for (let key in data.accessories) {\r\n        tempProducts.push(data.accessories[key]);\r\n      }\r\n    });\r\n    this.setState({ products: tempProducts });\r\n  };\r\n\r\n  handleBest = () => {\r\n    let tempProducts = [];\r\n\r\n    this.state.dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n\r\n      for (let key in data.best) {\r\n        tempProducts.push(data.best[key]);\r\n      }\r\n    });\r\n    this.setState({ products: tempProducts });\r\n  };\r\n\r\n  handleBooks = () => {\r\n    let tempProducts = [];\r\n\r\n    this.state.dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n\r\n      for (let key in data.books) {\r\n        tempProducts.push(data.books[key]);\r\n      }\r\n    });\r\n    this.setState({ products: tempProducts });\r\n  };\r\n\r\n  handleExclusives = () => {\r\n    let tempProducts = [];\r\n\r\n    this.state.dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n\r\n      for (let key in data.hak5) {\r\n        tempProducts.push(data.hak5[key]);\r\n      }\r\n    });\r\n    this.setState({ products: tempProducts });\r\n  };\r\n\r\n  handleFeatured = () => {\r\n    let tempProducts = [];\r\n\r\n    this.state.dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n\r\n      for (let key in data.featured) {\r\n        tempProducts.push(data.featured[key]);\r\n      }\r\n    });\r\n    this.setState({ products: tempProducts });\r\n  };\r\n\r\n  handleGadgets = () => {\r\n    let tempProducts = [];\r\n\r\n    this.state.dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n\r\n      for (let key in data.gadgets) {\r\n        tempProducts.push(data.gadgets[key]);\r\n      }\r\n    });\r\n    this.setState({ products: tempProducts });\r\n  };\r\n\r\n  handleHotplug = () => {\r\n    let tempProducts = [];\r\n\r\n    this.state.dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n\r\n      for (let key in data.hotplug) {\r\n        tempProducts.push(data.hotplug[key]);\r\n      }\r\n    });\r\n    this.setState({ products: tempProducts });\r\n  };\r\n\r\n  handleInternet= () => {\r\n    let tempProducts = [];\r\n\r\n    this.state.dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n\r\n      for (let key in data.internet) {\r\n        tempProducts.push(data.internet[key]);\r\n      }\r\n    });\r\n    this.setState({ products: tempProducts });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"categoryNav\">\r\n          <Title title=\"Product Catalogue\"></Title>\r\n          <p className=\"categoryHeading\">Categories</p>\r\n          <ul>\r\n            <li className=\"productCategory\" onClick={this.handleFeatured}>\r\n              Featured\r\n            </li>\r\n            <li className=\"productCategory\" onClick={this.handleBest}>\r\n              Best Sellers\r\n            </li>\r\n            <li className=\"productCategory\" onClick={this.handleExclusives}>\r\n              Hak5 Exclusives\r\n            </li>\r\n            <li className=\"productCategory\" onClick={this.handleAccessories}>\r\n              Accessories & Apparel\r\n            </li>\r\n            <li className=\"productCategory\" onClick={this.handleBooks}>\r\n              Books & Fieldkits\r\n            </li>\r\n            <li className=\"productCategory\" onClick={this.handleGadgets}>\r\n              Gadgets\r\n            </li>\r\n            <li className=\"productCategory\" onClick={this.handleHotplug}>\r\n              Hotplug Attack Tools\r\n            </li>\r\n            <li className=\"productCategory\" onClick={this.handleInternet}>\r\n              Internet & WiFi\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"gridContainer\">\r\n          {this.state.products.map((product, index) => {\r\n            return (\r\n              <div\r\n                key={index}\r\n                className=\"itemContainer\"\r\n              >\r\n                <img src={product.img} alt={product.title} />\r\n\r\n                <div className=\"itemTextContainer\">\r\n                  <p className=\"itemName\">{product.title}</p>\r\n                  <p className=\"itemDescription\">{product.description}</p>\r\n                  <p className=\"itemPrice\">{product.price}</p>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Product;","import React, { Component } from 'react';\r\nimport firebase from \"firebase/app\";\r\n// context api to keep data originating from one source while preventing too many props\r\n// create context object for products and buyers\r\nconst ProductContext = React.createContext();\r\n\r\nclass ProductProvider extends Component {\r\n  // I put all the state stuff in product.js\r\n  \r\n  render() {\r\n    // return context and product output from firebase\r\n    return (\r\n      // this will sit ontop of app.js in order to access the entire app. Need to use .children prop method to acces children.\r\n      <ProductContext.Provider value=\"hello from context\">\r\n        {this.props.children}\r\n      </ProductContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst ProductConsumer = ProductContext.Consumer;\r\n\r\nexport { ProductProvider, ProductConsumer };\r\n\r\n","import React, { Component } from 'react';\r\nimport Title from './Title';\r\n\r\nclass CategoryNav extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* Product Category Column */}\r\n\r\n        <div className=\"categoryNav\">\r\n          <Title title=\"Product Catalogue\"></Title>\r\n          <p className=\"categoryHeading\">Categories</p>\r\n          <ul>\r\n            <li className=\"productCategory\">Best Sellers</li>\r\n            <li className=\"productCategory\" onClick={this.handleWireless}>\r\n              Wireless Pen Testing\r\n            </li>\r\n            <li className=\"productCategory\">Hotplug Attack Tools</li>\r\n          </ul>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CategoryNav;","import React, { Component } from 'react';\r\nimport Product from './Product';\r\nimport Title from './Title';\r\nimport CategoryNav from './CategoryNav';\r\nimport { ProductConsumer } from '../context';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// same as PRODUCTLIST\r\nclass ProductInventory extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <>\r\n        <main>\r\n          <div className=\"wrapper\">\r\n            <div className=\"itemGridCol\">\r\n              <Product />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductInventory;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"wrapper\">\r\n        <p>© 2020 Ismail Khan</p>\r\n        <p>Created at Juno College</p>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\n\r\n// components folder\r\nimport Header from \"./components/Header\";\r\nimport ProductInventory from './components/ProductInventory';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component {\r\n  // put main app in render method\r\n  render() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        {/* logo, tagline, and cart icon */}\r\n        <Header />\r\n        <ProductInventory />\r\n        {/* footer */}\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}